pipeline {
    agent any

    environment {
        AWS_REGION = 'us-west-2'  
        EKS_CLUSTER_NAME = 'mycluster'  
        ECR_REPO = 'model-repo'  
        IMAGE_TAG = "latest-${env.BUILD_ID}"
        DOCKER_IMAGE = "${ECR_REPO}:${IMAGE_TAG}"
        AWS_ACCOUNT_ID = '###########'  
        ECR_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout your repository from Git
                git branch: 'main', url: 'https://github.com/your-repo/your-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Login to Amazon ECR
                    sh """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                    """

                    // Build Docker image
                    sh """
                    docker build -t ${DOCKER_IMAGE} .
                    """

                    // Tag the Docker image
                    sh """
                    docker tag ${DOCKER_IMAGE} ${ECR_URL}/${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Push the Docker image to ECR
                    sh """
                    docker push ${ECR_URL}/${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Update kubeconfig to use EKS cluster
                    sh """
                    aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                    """

                    // Set image in the Kubernetes deployment
                    sh """
                    kubectl set image deployment/your-deployment-name your-container-name=${ECR_URL}/${DOCKER_IMAGE} --record
                    """

                    // Verify the deployment
                    sh """
                    kubectl rollout status deployment/your-deployment-name
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images from the Jenkins agent
            sh """
            docker rmi ${ECR_URL}/${DOCKER_IMAGE} || true
            docker rmi ${DOCKER_IMAGE} || true
            """
        }
        success {
            echo "Deployment to EKS was successful!"
        }
        failure {
            echo "Deployment to EKS failed."
        }
    }
}
